# -*- mode: ruby -*-
# vi: set ft=ruby :
$update_os = <<SCRIPT
echo "Updating packages to the latest version"
apt update && apt upgrade -y
SCRIPT
$install_docker_from_docker = <<SCRIPT
echo "Installing Docker dependecies..."
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
if [ ! -f /etc/apt/sources.list.d/docker.list ]; then
  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
fi
echo "Installing Docker..."
apt update
apt install docker-ce docker-ce-cli containerd.io -y
echo "Installing Docker Compose..."
curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
#echo "Reboot now..."
#reboot now
SCRIPT
$install_docker_from_repo = <<SCRIPT
echo "Installing Docker and Docker Compose..."
apt install docker.io docker-compose -y
echo "Done"
#echo "Reboot now..."
#reboot now
SCRIPT
$install_docker_from_script = <<SCRIPT
echo "Installing Docker"
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
echo "Done"
SCRIPT
$connect_to_docker_hub = <<SCRIPT
echo "Dezinstalare docker credential helpers"
apt remove golang-docker-credential-helpers -y
echo "Done"
echo "Conectare la Docker Hub" 
docker login -p wantsome2021 -u acp81
echo "Done"
SCRIPT
$build_push_run_jenkins = <<SCRIPT
echo "Build jenkins image..."
cd /
cd /vagrant/jenkins
docker pull acp81/jenkins
#docker build -t acp81/jenkins .
docker build -t acp81/jenkins:$(docker images | awk '($1 == "acp81/jenkins") {print $2 += .01; exit}') .
echo "Push jenkins image..."
sudo docker push acp81/jenkins -a
echo "Pornire conatiner jenkins..."
docker run -d -p 8080:8080 --name=jenkins acp81/jenkins:latest
SCRIPT
$build_push_postgresql = <<SCRIPT
echo "Build Postgresql image..."
cd /
cd /vagrant/postgresql
docker pull acp81/postgresql
docker build -t acp81/postgresql:$(docker images | awk '($1 == "acp81/postgresql") {print $2 += .01; exit}') .
echo "Push postgresql image..."
sudo docker push acp81/postgresql -a
#echo "Pornire conatiner postgresql..."
#docker run --rm -d -P -p 5432:5432 --name postgresql acp81/postgresql:latest
SCRIPT
$build_push_drupal = <<SCRIPT
echo "Build Drupal image..."
cd /
cd /vagrant/drupal
docker pull acp81/drupal
docker build -t acp81/drupal:$(docker images | awk '($1 == "acp81/drupal") {print $2 += .01; exit}') .
echo "Push Drupal image..."
sudo docker push acp81/drupal -a
SCRIPT
$run_docker_compose = <<SCRIPT
echo "Run docker compose..."
cd /
cd /vagrant
docker-compose up -d
SCRIPT
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"
  config.vm.define "server1" do |uds|
    uds.vm.hostname = "server1"
    uds.vm.network "private_network", ip: "10.11.11.13"
    uds.vm.provision "shell", :inline => $update_os
    uds.vm.provision "shell", :inline => $install_docker_from_repo
    uds.vm.provision "shell", :inline => $connect_to_docker_hub
    uds.vm.provision "shell", :inline => $build_push_run_jenkins
    uds.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = "2"
    end
  end
  config.vm.define "server2" do |udc|
	udc.vm.hostname = "server2"
    udc.vm.network "private_network", ip: "10.11.11.14"
    udc.vm.provision "shell", :inline => $update_os
    udc.vm.provision "shell", :inline => $install_docker_from_docker
    udc.vm.provision "shell", :inline => $connect_to_docker_hub
    udc.vm.provision "shell", :inline => $build_push_postgresql
    udc.vm.provision "shell", :inline => $build_push_drupal
    udc.vm.provision "shell", :inline => $run_docker_compose
    udc.vm.provider "virtualbox" do |vb|
      vb.memory = "3072"
      vb.cpus = "2"
    end
  end
end